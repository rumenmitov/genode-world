diff -NaurwB contrib/gcc-3cade18cf9defeefa714aa91de3b157fbad4aa18/src/noux-pkg/gcc/libgo/go/golang_org/x/net/route/syscall.go gcc/libgo/go/golang_org/x/net/route/syscall.go
--- contrib/gcc-3cade18cf9defeefa714aa91de3b157fbad4aa18/src/noux-pkg/gcc/libgo/go/golang_org/x/net/route/syscall.go	2017-09-14 20:11:35.000000000 +0300
+++ gcc/libgo/go/golang_org/x/net/route/syscall.go	2021-04-12 17:01:41.717891927 +0300
@@ -2,27 +2,37 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-// +build darwin dragonfly freebsd netbsd openbsd
+// +build darwin dragonfly freebsd netbsd openbsd inno
 
 package route
 
 import (
-	"syscall"
+	"errors"
 	"unsafe"
 )
 
 var zero uintptr
 
-func sysctl(mib []int32, old *byte, oldlen *uintptr, new *byte, newlen uintptr) error {
+//extern sysctl
+func c_sysctl(name *byte, namelen _C_uint, oldp *byte, oldlenp *Size_t, newp *byte, newlen Size_t) _C_int
+func sysctl(mib []int32, old *byte, oldlen *uintptr, new *byte, newlen uintptr) err error {
 	var p unsafe.Pointer
 	if len(mib) > 0 {
 		p = unsafe.Pointer(&mib[0])
 	} else {
 		p = unsafe.Pointer(&zero)
 	}
-	_, _, errno := syscall.Syscall6(syscall.SYS___SYSCTL, uintptr(p), uintptr(len(mib)), uintptr(unsafe.Pointer(old)), uintptr(unsafe.Pointer(oldlen)), uintptr(unsafe.Pointer(new)), uintptr(newlen))
-	if errno != 0 {
-		return error(errno)
+	Entersyscall()
+	_r := c_sysctl(p, namelen, oldp, oldlenp, newp, newlen)
+	var errno Errno
+	setErrno := false
+	if _r < 0 {
+		errno = GetErrno()
+		setErrno = true
 	}
-	return nil
+	Exitsyscall()
+	if setErrno {
+		err = error(errno)
+	}
+	return
 }
